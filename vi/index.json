[
{
	"uri": "/vi/2-preparation/2.1-creatingvpc/",
	"title": "Creating  VPC",
	"tags": [],
	"description": "",
	"content": "In this step we will learn how to create a VPC for our database and EC2 instance\nCreating a VPC First go to your AWS VPC console: click create Create VPC In the VPC creation form : click on VPC and more add VPC-RDS as the name tag add 10.0.0.0/16 as the CIDR block click on no IPV6 CIDR set then number of AZ as 2 number of public subnet as 2 number of private subnet as 0 then set the NAT gateway and S3 end point as None finally click on the create VPC log back to your AWS VPC console for the next step "
},
{
	"uri": "/vi/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "resources these are the following recourse that we will be using thought out this lab\nEc2 instance Amazon RDS Amazon VPC resources explanation Amazon VPC\nAmazon Virtual Private Cloud (Amazon VPC) gives you full control over your virtual networking environment, including resource placement, connectivity, and security. Get started by setting up your VPC in the AWS service console. Next, add resources to it such as Amazon Elastic Compute Cloud (EC2) and Amazon Relational Database Service (RDS) instances. Finally, define how your VPCs communicate with each other across accounts, Availability Zones, or AWS Regions. In the example below, network traffic is being shared between two VPCs within each Region.\nAmazon VPC have the following used case:\nLaunch a simple website or blog : Improve your web application security posture by enforcing rules on inbound and outbound connections. Host multi-tier web applications: Define network connectivity and restrictions between your web servers, application servers, and databases. Create hybrid connections : Build and manage a compatible VPC network across your AWS services and on premises.. today we will be using Amazon VPC to create a Virtual Private Cloud for our RDS databases and instance Amazon Relational Database Service\nAmazon Relational Database Service (Amazon RDS) is a collection of managed services that makes it simple to set up, operate, and scale databases in the cloud. Choose from seven popular engines — Amazon Aurora with MySQL compatibility, Amazon Aurora with PostgreSQL compatibility, MySQL, MariaDB, PostgreSQL, Oracle, and SQL Server — and deploy on-premises with Amazon RDS on AWS Outposts.\nAmazon Relational Database Service have the following used case:\nBuild web and mobile applications :Support growing apps with high availability, throughput, and storage scalability. Take advantage of flexible pay-per-use pricing to suit various application usage patterns. Move to managed databases :Innovate and build new apps with Amazon RDS instead of worrying about self-managing your databases, which can be time consuming, complex, and expensive. Break free from legacy databases : Free yourself from expensive, punitive, commercial databases by migrating to Amazon Aurora. When you migrate to Aurora, you get the scalability, performance, and availability of commercial databases at 1/10th the cost. Amazon EC2 instance\nAmazon Elastic Compute Cloud (Amazon EC2) offers the broadest and deepest compute platform, with over 700 instances and choice of the latest processor, storage, networking, operating system, and purchase model to help you best match the needs of your workload. We are the first major cloud provider that supports Intel, AMD, and Arm processors, the only cloud with on-demand EC2 Mac instances, and the only cloud with 400 Gbps Ethernet networking. We offer the best price performance for machine learning training, as well as the lowest cost per inference instances in the cloud. More SAP, high performance computing (HPC), ML, and Windows workloads run on AWS than any other cloud.\nAmazon EC2 instance have the following used case:\nRun cloud-native and enterprise applications :Amazon EC2 delivers secure, reliable, high-performance, and cost-effective compute infrastructure to meet demanding business needs. Scale for HPC applications :Access the on-demand infrastructure and capacity you need to run HPC applications faster and cost-effectively. "
},
{
	"uri": "/vi/2-preparation/2.2-creatingsubnet/",
	"title": "Creating Security Group",
	"tags": [],
	"description": "",
	"content": "Creating security group In this step we are going to create the security group for Amazon RDS and EC2 instance\nGo to VPC console In the left nav bar , click on security group . click on create security group 4. In the create security group form :\nName the security group as SCG-RDS Name the description as security group for RDS In the inbound rule add 4 different rule : one for SSH one for HTTP one for HTTPS one for SQL/AURORA set all the source to ipv4-everywhere on the out bound rule set as All traffic then click create security group "
},
{
	"uri": "/vi/2-preparation/",
	"title": "preparation",
	"tags": [],
	"description": "",
	"content": "\ryou need to learn how to create VPC and linux in a EC2 instance to proceed with this lab\nTo learn how to create linux ec2 instance and vpn, you can refer to these lab:\nstarting with aws VPC simple EC2 instance You need to create VPC and EC2 first before interacting with the Amazon RDS database Content Creating VPC Creating Security Group Create EC2 instance Configuring EC2 instance with MobaXterm "
},
{
	"uri": "/vi/2-preparation/2.3-creatinglambdafunction/",
	"title": "Create EC2 instance",
	"tags": [],
	"description": "",
	"content": "In this step we will learn how to create EC2 instance\nThe architecture overview after you complete this step will be as follows:\nGo to EC2 console click on launch instance In the EC2 form : name the EC2 instance as EC2-RDS click Amazon linux choose Amazon linux 2 AMI choose the 64 bit architecture choose t3.mirco as instance type then click create new key pair In the new key pair form : name the new key as RDS-key key pair type as RSA private key format as .pem click create key pair In the network setting click edit choose the VPC-RDS as the VPC that we just created choose the only subnet in VPC-RDS choose auto assign IP enable click select exiting security group choose the security group we just created SCG-RDS then click launch instance In instance copy the instance public ip address "
},
{
	"uri": "/vi/3-subnetgroup/",
	"title": "Tạo Bot Lex",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ cấu hình bot AWS Lexv2 của chúng ta với các slot và intent chính xác và kết nối nó với hàm Lambda của chúng ta. Nội dung 3.1. Tạo loại bot Lex và tùy chỉnh\n3.2. TẠO BOT LEX\n"
},
{
	"uri": "/vi/2-preparation/2.4-moba/",
	"title": "Configuring EC2 instance with MobaXterm",
	"tags": [],
	"description": "",
	"content": "install MobaXterm and connecting the EC2 instance click on this link to install MobaXterm after installing MobaXterm click on session add the paste the public ip address that we copy into the remote host specify the user name as ec2-user then select the .pem key that we downloaded click ok we now access our linux easy 2 instance configuring database in EC2 this code will install the mariadb SQL database server in the ec2 instance sudo su -\ryum -y install mariadb-server wget\rsystemctl enable mariadb\rsystemctl start mariadb\ryum -y update then set the environment variable of all including the name of our database , the DBPassword , the DBRootPassword , the database user name DBName=ec2db\rDBPassword=admin123456\rDBRootPassword=admin123456\rDBUser=ec2dbuser 3. set up the database\necho \u0026#34;CREATE DATABASE ${DBName};\u0026#34; \u0026gt;\u0026gt; /tmp/db.setup\recho \u0026#34;CREATE USER \u0026#39;${DBUser}\u0026#39; IDENTIFIED BY \u0026#39;${DBPassword}\u0026#39;;\u0026#34; \u0026gt;\u0026gt; /tmp/db.setup\recho \u0026#34;GRANT ALL PRIVILEGES ON *.* TO \u0026#39;${DBUser}\u0026#39;@\u0026#39;%\u0026#39;;\u0026#34; \u0026gt;\u0026gt; /tmp/db.setup\recho \u0026#34;FLUSH PRIVILEGES;\u0026#34; \u0026gt;\u0026gt; /tmp/db.setup\rmysqladmin -u root password \u0026#34;${DBRootPassword}\u0026#34;\rmysql -u root --password=\u0026#34;${DBRootPassword}\u0026#34; \u0026lt; /tmp/db.setup\rrm /tmp/db.setup 4. then add some data to test out our instance\nmysql -u root --password=\u0026#34;${DBRootPassword}\u0026#34;\rUSE ec2db;\rCREATE TABLE table1 (id INT, name VARCHAR(45));\rINSERT INTO table1 VALUES(1, \u0026#39;Virat\u0026#39;), (2, \u0026#39;Sachin\u0026#39;), (3, \u0026#39;Dhoni\u0026#39;), (4, \u0026#39;ABD\u0026#39;);\rSELECT * FROM table1; It will now out put us the table that we created using mariadb-server\n"
},
{
	"uri": "/vi/4-creatingrdsdb/",
	"title": "Twillio",
	"tags": [],
	"description": "",
	"content": "Trong chương này, chúng ta sẽ cấu hình Twilio để làm việc với bot Amazon Lex của chúng ta.\nTạo một tài khoản Twilio Mở Twilio bằng liên kết sau: TWILLIO\nNhấp vào đăng nhập sau đó làm theo hướng dẫn để đăng nhập vào tài khoản của bạn Chọn phần quan trọng nhất trong cấu hình TWILLIO : Chọn SMS làm sử dụng Trong phần Làm thế nào bạn muốn xây dựng với Twilio chọn với mã tối thiểu Sau đó nhấp bắt đầu Trong màn hình chính của Twilio, chọn get phone number Nhấp vào tài khoản Twilio của bạn Lấy Account SID và Auth Token để sử dụng với bot Lex Xây dựng bot Lex để làm việc với Twilio Trên phiên bản bot nhấp vào tạo phiên bản Nhấp vào Tạo phiên bản Trong tích hợp kênh nhấp Thêm kênh Trong mẫu tạo tích hợp kênh :\nNhấp vào Twilio Đặt tên bot là bot Twilio Chọn TestBotAlias Chọn ngôn ngữ là English Sau đó thêm Account ID và khóa xác thực trong tài khoản Twilio của bạn 5 Khi tạo thành công, sao chép URL của kênh Gọi điện thoại bằng Twilio Kiểm tra tin nhắn WhatsApp Trong Twilio nhấp vào Tin nhắn Nhấp vào Gửi tin nhắn WhatsApp Trong WhatsApp thử gửi tin nhắn, Twilio sẽ cung cấp số điện thoại và mã tham gia hãy sao chép chúng: Tìm số Twilio trên WhatsApp sau đó nhập mã vào Twilio Trong cài đặt bot của WhatsApp sao chép URL bot Lex vào phần post Sau đó nhấn lưu Bây giờ bạn có thể trò chuyện với bot Lex của mình qua WhatsApp sử dụng Twilio "
},
{
	"uri": "/vi/5-cleanup/",
	"title": "Dọn dẹp",
	"tags": [],
	"description": "",
	"content": "Trong chương này, chúng ta sẽ làm sạch tất cả các tài nguyên mà chúng ta đã sử dụng.\nDọn dẹp cơ sở dữ liệu Dynamodb Điều hướng đến bảng điều khiển Dynamodb Dynamodb Nhấp vào EmployeesDatabases Nhấp vào Xóa Một biểu mẫu xác nhận xóa sẽ xuất hiện : Điền vào \u0026ldquo;confirm\u0026rdquo; Sau đó nhấp Xóa Dọn dẹp hàm Lambda Điều hướng đến Giao diện Dịch vụ Lambda Nhấp vào BotFunction Nhấp vào Xóa Một biểu mẫu xác nhận xóa sẽ xuất hiện : Điền vào \u0026ldquo;delete\u0026rdquo; Sau đó nhấp Xóa Dọn dẹp bot Lex Điều hướng đến bảng điều khiển bot Lex lex bot Nhấp vào Xóa để xóa bot Lex "
},
{
	"uri": "/vi/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "title : \u0026ldquo;Connecting your ec2 to Amazon RDS\u0026rdquo; date : \u0026ldquo;r Sys.Date()\u0026rdquo; weight : 1 chapter : false configuring our linux ec2 instance to work with Amazon RDS Lab structure In this lab we will be configuring Amazon linux in our ec2 instance to work with Amazon RDS relational database\ncontent Introduction preparation creating subnet group Creating RDS database Clean up "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]